name: Continous Deployment

on:
  push:
    branches:
      - "**"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build_matrix:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.generate-matrix.outputs.branches }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v2.1.0
      - name: Generate Matrix
        id: generate-matrix
        run: |
          branches=($(git branch -r | cut -c 3- | sed 's/origin\///g'))
          json_branches=$(printf '%s\n' "${branches[@]}" | jq -R . | jq -s -c .)
          echo "branches=${json_branches}" >> $GITHUB_OUTPUT
#          echo ::set-output name=branches::${json_branches}

  my_echo:
    runs-on: ubuntu-latest
    needs:
      - build_matrix
    steps:
      - name: Echo previous outputs
        run: echo "${{ toJSON(needs.build_matrix.outputs) }}"

  build:
    runs-on: ubuntu-latest
    name: Build
    needs:
      - build_matrix
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.build_matrix.outputs.branches) }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
      - uses: actions/setup-node@v4
        with:
          # Version Spec of the version to use in SemVer notation.
          # It also emits such aliases as lts, latest, nightly and canary builds
          # Examples: 12.x, 10.15.1, >=10.15.0, lts/Hydrogen, 16-nightly, latest, node
          node-version: 20
      - name: Build
        run: |
          npm install
          npm run build
#      - name: Build
#        run: |
#          git for-each-ref --shell \
#          --format='git checkout \
#          refs/heads/



#  deploy:
#    runs-on: ubuntu-latest
#    name: Deploy
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    needs:
#      - build
#    steps:
#      - name: Setup Pages
#        uses: actions/configure-pages@v3
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v2
#        with:
#          path: ./dist/cv/browser/
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v2
